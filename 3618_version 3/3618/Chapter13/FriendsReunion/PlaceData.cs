//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace FriendsReunion {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class PlaceData : DataSet {
        
        private PlaceDataTable tablePlace;
        
        public PlaceData() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected PlaceData(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Place"] != null)) {
                    this.Tables.Add(new PlaceDataTable(ds.Tables["Place"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PlaceDataTable Place {
            get {
                return this.tablePlace;
            }
        }
        
        public override DataSet Clone() {
            PlaceData cln = ((PlaceData)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Place"] != null)) {
                this.Tables.Add(new PlaceDataTable(ds.Tables["Place"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablePlace = ((PlaceDataTable)(this.Tables["Place"]));
            if ((this.tablePlace != null)) {
                this.tablePlace.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "PlaceData";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/PlaceData.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablePlace = new PlaceDataTable();
            this.Tables.Add(this.tablePlace);
        }
        
        private bool ShouldSerializePlace() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void PlaceRowChangeEventHandler(object sender, PlaceRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PlaceDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPlaceID;
            
            private DataColumn columnTypeID;
            
            private DataColumn columnName;
            
            private DataColumn columnAddress;
            
            private DataColumn columnNotes;
            
            private DataColumn columnAdministratorID;
            
            private DataColumn columnTypeName;
            
            internal PlaceDataTable() : 
                    base("Place") {
                this.InitClass();
            }
            
            internal PlaceDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PlaceIDColumn {
                get {
                    return this.columnPlaceID;
                }
            }
            
            internal DataColumn TypeIDColumn {
                get {
                    return this.columnTypeID;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            internal DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            internal DataColumn AdministratorIDColumn {
                get {
                    return this.columnAdministratorID;
                }
            }
            
            internal DataColumn TypeNameColumn {
                get {
                    return this.columnTypeName;
                }
            }
            
            public PlaceRow this[int index] {
                get {
                    return ((PlaceRow)(this.Rows[index]));
                }
            }
            
            public event PlaceRowChangeEventHandler PlaceRowChanged;
            
            public event PlaceRowChangeEventHandler PlaceRowChanging;
            
            public event PlaceRowChangeEventHandler PlaceRowDeleted;
            
            public event PlaceRowChangeEventHandler PlaceRowDeleting;
            
            public void AddPlaceRow(PlaceRow row) {
                this.Rows.Add(row);
            }
            
            public PlaceRow AddPlaceRow(string PlaceID, string TypeID, string Name, string Address, string Notes, string AdministratorID, string TypeName) {
                PlaceRow rowPlaceRow = ((PlaceRow)(this.NewRow()));
                rowPlaceRow.ItemArray = new object[] {
                        PlaceID,
                        TypeID,
                        Name,
                        Address,
                        Notes,
                        AdministratorID,
                        TypeName};
                this.Rows.Add(rowPlaceRow);
                return rowPlaceRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PlaceDataTable cln = ((PlaceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PlaceDataTable();
            }
            
            internal void InitVars() {
                this.columnPlaceID = this.Columns["PlaceID"];
                this.columnTypeID = this.Columns["TypeID"];
                this.columnName = this.Columns["Name"];
                this.columnAddress = this.Columns["Address"];
                this.columnNotes = this.Columns["Notes"];
                this.columnAdministratorID = this.Columns["AdministratorID"];
                this.columnTypeName = this.Columns["TypeName"];
            }
            
            private void InitClass() {
                this.columnPlaceID = new DataColumn("PlaceID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPlaceID);
                this.columnTypeID = new DataColumn("TypeID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTypeID);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnAddress = new DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress);
                this.columnNotes = new DataColumn("Notes", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNotes);
                this.columnAdministratorID = new DataColumn("AdministratorID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAdministratorID);
                this.columnTypeName = new DataColumn("TypeName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTypeName);
                this.columnPlaceID.AllowDBNull = false;
                this.columnTypeID.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnAdministratorID.AllowDBNull = false;
                this.columnTypeName.AllowDBNull = false;
            }
            
            public PlaceRow NewPlaceRow() {
                return ((PlaceRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PlaceRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PlaceRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PlaceRowChanged != null)) {
                    this.PlaceRowChanged(this, new PlaceRowChangeEvent(((PlaceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PlaceRowChanging != null)) {
                    this.PlaceRowChanging(this, new PlaceRowChangeEvent(((PlaceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PlaceRowDeleted != null)) {
                    this.PlaceRowDeleted(this, new PlaceRowChangeEvent(((PlaceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PlaceRowDeleting != null)) {
                    this.PlaceRowDeleting(this, new PlaceRowChangeEvent(((PlaceRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePlaceRow(PlaceRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PlaceRow : DataRow {
            
            private PlaceDataTable tablePlace;
            
            internal PlaceRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePlace = ((PlaceDataTable)(this.Table));
            }
            
            public string PlaceID {
                get {
                    return ((string)(this[this.tablePlace.PlaceIDColumn]));
                }
                set {
                    this[this.tablePlace.PlaceIDColumn] = value;
                }
            }
            
            public string TypeID {
                get {
                    return ((string)(this[this.tablePlace.TypeIDColumn]));
                }
                set {
                    this[this.tablePlace.TypeIDColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tablePlace.NameColumn]));
                }
                set {
                    this[this.tablePlace.NameColumn] = value;
                }
            }
            
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tablePlace.AddressColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlace.AddressColumn] = value;
                }
            }
            
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tablePlace.NotesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlace.NotesColumn] = value;
                }
            }
            
            public string AdministratorID {
                get {
                    return ((string)(this[this.tablePlace.AdministratorIDColumn]));
                }
                set {
                    this[this.tablePlace.AdministratorIDColumn] = value;
                }
            }
            
            public string TypeName {
                get {
                    return ((string)(this[this.tablePlace.TypeNameColumn]));
                }
                set {
                    this[this.tablePlace.TypeNameColumn] = value;
                }
            }
            
            public bool IsAddressNull() {
                return this.IsNull(this.tablePlace.AddressColumn);
            }
            
            public void SetAddressNull() {
                this[this.tablePlace.AddressColumn] = System.Convert.DBNull;
            }
            
            public bool IsNotesNull() {
                return this.IsNull(this.tablePlace.NotesColumn);
            }
            
            public void SetNotesNull() {
                this[this.tablePlace.NotesColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PlaceRowChangeEvent : EventArgs {
            
            private PlaceRow eventRow;
            
            private DataRowAction eventAction;
            
            public PlaceRowChangeEvent(PlaceRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PlaceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
